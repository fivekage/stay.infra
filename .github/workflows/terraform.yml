name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_project_id: ${{ secrets.TF_VAR_PROJECT_ID }}
      TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT }}
      TF_VAR_project_name: ${{ secrets.TF_VAR_PROJECT_NAME }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Login to Google Cloud
      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"

      # Set up the gcloud CLI
      - name: Set up project
        run: gcloud config set project ${{ secrets.TF_VAR_PROJECT_ID }}

      # Enable Cloud Resource Manager API
      - name: Enable Cloud Resource Manager API
        run: gcloud services enable cloudresourcemanager.googleapis.com

      # Enable Service Usage API
      - name: Enable Service Usage API
        run: gcloud services enable serviceusage.googleapis.com

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        run: terraform apply -auto-approve -input=false
